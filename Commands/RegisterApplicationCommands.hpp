// RegisterApplicationCommands.hpp - Registers the slash commands of this bot.
// may 27, 2021
// chris m.
// https://github.com/real_time_chris

#pragma once

#include "HelperFunctions.hpp"

namespace discord_core_api {

	class register_application_commands {
	  public:
		register_application_commands() {
			createStreamAudioData.dmPermission			   = false;
			createStreamAudioData.defaultMemberPermissions = permission::Use_Application_Commands;
			createStreamAudioData.type					   = application_command_type::Chat_Input;
			createStreamAudioData.name					   = "streamaudio";
			createStreamAudioData.description			   = "connects to a voice channel to stream audio.";
			application_command_option_data streamAudioOptionOne{};
			streamAudioOptionOne.type		 = application_command_option_type::String;
			streamAudioOptionOne.description = "which ip to connect to.";
			streamAudioOptionOne.name		 = "connectionip";
			streamAudioOptionOne.required	 = true;
			createStreamAudioData.options.emplace_back(streamAudioOptionOne);
			application_command_option_data streamAudioOptionTwo{};
			streamAudioOptionTwo.type		 = application_command_option_type::Boolean;
			streamAudioOptionTwo.description = "whether or not to enable retransmission of other bot's audio.";
			streamAudioOptionTwo.name		 = "botaudio";
			streamAudioOptionTwo.required	 = true;
			createStreamAudioData.options.emplace_back(streamAudioOptionTwo);

			createDisconnectData.dmPermission			  = false;
			createDisconnectData.defaultMemberPermissions = permission::Use_Application_Commands;
			createDisconnectData.type					  = application_command_type::Chat_Input;
			createDisconnectData.name					  = "disconnect";
			createDisconnectData.description			  = "disconnect from the current voice channel.";

			reactionRoleData.dmPermission			  = false;
			reactionRoleData.defaultMemberPermissions = permission::Use_Application_Commands;
			reactionRoleData.description			  = "setup or instantiate the 'reaction role' menu.";
			reactionRoleData.name					  = "reactionrole";
			reactionRoleData.type					  = application_command_type::Chat_Input;
			application_command_option_data reactionRoleDataOptionOh;
			reactionRoleDataOptionOh.type		 = application_command_option_type::Sub_Command;
			reactionRoleDataOptionOh.name		 = "add";
			reactionRoleDataOptionOh.description = "adds a role to the current list of roles.";
			application_command_option_data reactionRoleDataOptionOneOne;
			reactionRoleDataOptionOneOne.type		 = application_command_option_type::Role_Data;
			reactionRoleDataOptionOneOne.description = "which role to add.";
			reactionRoleDataOptionOneOne.name		 = "role";
			reactionRoleDataOptionOneOne.required	 = true;
			reactionRoleDataOptionOh.options.emplace_back(reactionRoleDataOptionOneOne);
			reactionRoleData.options.emplace_back(reactionRoleDataOptionOh);
			application_command_option_data reactionRoleDataOptionTwo;
			reactionRoleDataOptionTwo.type		  = application_command_option_type::Sub_Command;
			reactionRoleDataOptionTwo.name		  = "remove";
			reactionRoleDataOptionTwo.description = "removes a role from the current list of roles.";
			application_command_option_data reactionRoleDataOptionTwoOne;
			reactionRoleDataOptionTwoOne.type		 = application_command_option_type::Role_Data;
			reactionRoleDataOptionTwoOne.description = "which role to remove.";
			reactionRoleDataOptionTwoOne.name		 = "role";
			reactionRoleDataOptionTwoOne.required	 = true;
			reactionRoleDataOptionTwo.options.emplace_back(reactionRoleDataOptionTwoOne);
			reactionRoleData.options.emplace_back(reactionRoleDataOptionTwo);
			application_command_option_data reactionRoleDataOptionThree;
			reactionRoleDataOptionThree.type		= application_command_option_type::Sub_Command;
			reactionRoleDataOptionThree.name		= "instantiate";
			reactionRoleDataOptionThree.description = "posts the 'react-to-be-roled' message in the current channel along with a provided message.";
			application_command_option_data reactionRoleDataOptionThreeOne;
			reactionRoleDataOptionThreeOne.type		   = application_command_option_type::String;
			reactionRoleDataOptionThreeOne.description = "which message to provide on the 'react-to-be-roled' menu.";
			reactionRoleDataOptionThreeOne.name		   = "message";
			reactionRoleDataOptionThreeOne.required	   = true;
			reactionRoleDataOptionThree.options.emplace_back(reactionRoleDataOptionThreeOne);
			reactionRoleData.options.emplace_back(reactionRoleDataOptionThree);

			createSetDefaultRoleIdsData.dmPermission			 = false;
			createSetDefaultRoleIdsData.defaultMemberPermissions = permission::Use_Application_Commands;
			createSetDefaultRoleIdsData.description				 = "sets a default role to be added to a new user, or removes one.";
			createSetDefaultRoleIdsData.name					 = "setdefaultrole";
			createSetDefaultRoleIdsData.type					 = application_command_type::Chat_Input;
			application_command_option_data createSetDefaultRoleIdsDataOptionOh;
			createSetDefaultRoleIdsDataOptionOh.type		= application_command_option_type::Sub_Command;
			createSetDefaultRoleIdsDataOptionOh.name		= "view";
			createSetDefaultRoleIdsDataOptionOh.description = "view the list of default roles.";
			createSetDefaultRoleIdsData.options.emplace_back(createSetDefaultRoleIdsDataOptionOh);
			application_command_option_data createSetDefaultRoleIdsDataOptionOne;
			createSetDefaultRoleIdsDataOptionOne.type		 = application_command_option_type::Sub_Command;
			createSetDefaultRoleIdsDataOptionOne.name		 = "add";
			createSetDefaultRoleIdsDataOptionOne.description = "add a new default role to the list.";
			application_command_option_data createSetDefaultRoleIdsDataOptionOneTwo;
			createSetDefaultRoleIdsDataOptionOneTwo.type		= application_command_option_type::Role_Data;
			createSetDefaultRoleIdsDataOptionOneTwo.description = "which role to add.";
			createSetDefaultRoleIdsDataOptionOneTwo.name		= "role";
			createSetDefaultRoleIdsDataOptionOneTwo.required	= true;
			createSetDefaultRoleIdsDataOptionOne.options.emplace_back(createSetDefaultRoleIdsDataOptionOneTwo);
			createSetDefaultRoleIdsData.options.emplace_back(createSetDefaultRoleIdsDataOptionOne);
			application_command_option_data createSetDefaultRoleIdsDataOptionTwo;
			createSetDefaultRoleIdsDataOptionTwo.type		 = application_command_option_type::Sub_Command;
			createSetDefaultRoleIdsDataOptionTwo.name		 = "remove";
			createSetDefaultRoleIdsDataOptionTwo.description = "remove a default role from the list.";
			application_command_option_data createSetDefaultRoleIdsDataOptionTwoTwo;
			createSetDefaultRoleIdsDataOptionTwoTwo.type		= application_command_option_type::Role_Data;
			createSetDefaultRoleIdsDataOptionTwoTwo.description = "which role to remove.";
			createSetDefaultRoleIdsDataOptionTwoTwo.name		= "role";
			createSetDefaultRoleIdsDataOptionTwoTwo.required	= true;
			createSetDefaultRoleIdsDataOptionTwo.options.emplace_back(createSetDefaultRoleIdsDataOptionTwoTwo);
			createSetDefaultRoleIdsData.options.emplace_back(createSetDefaultRoleIdsDataOptionTwo);
			createBotInfoCommandData.dmPermission			  = true;

			createBotInfoCommandData.description			  = "displays info about the current bot.";
			createBotInfoCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createBotInfoCommandData.name					  = "botinfo";
			createBotInfoCommandData.type					  = application_command_type::Chat_Input;

			createDisplayGuildsDataCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createDisplayGuildsDataCommandData.dmPermission				= true;
			createDisplayGuildsDataCommandData.description				= "view the list of servers that this bot is in.";
			createDisplayGuildsDataCommandData.name						= "displayguildsdata";
			createDisplayGuildsDataCommandData.type						= application_command_type::Chat_Input;

			createGhostCommandData.dmPermission				= false;
			createGhostCommandData.description				= "mutes/silences a server-member.";
			createGhostCommandData.name						= "ghost";
			createGhostCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createGhostCommandData.type						= application_command_type::Chat_Input;
			application_command_option_data createGhostOptionOne;
			createGhostOptionOne.type		 = application_command_option_type::Sub_Command;
			createGhostOptionOne.name		 = "view";
			createGhostOptionOne.description = "view the currently ghosted members.";
			createGhostCommandData.options.emplace_back(createGhostOptionOne);
			application_command_option_data createGhostOptionTwo;
			createGhostOptionTwo.type		 = application_command_option_type::Sub_Command;
			createGhostOptionTwo.name		 = "add";
			createGhostOptionTwo.description = "ghosts a new server member.";
			application_command_option_data createGhostOptionTwoTwo;
			createGhostOptionTwoTwo.name		= "user";
			createGhostOptionTwoTwo.description = "chooses which member to ghost.";
			createGhostOptionTwoTwo.required	= true;
			createGhostOptionTwoTwo.type		= application_command_option_type::User_Data;
			createGhostOptionTwo.options.emplace_back(createGhostOptionTwoTwo);
			application_command_option_data createGhostOptionTwoThree;
			createGhostOptionTwoThree.name		  = "reason";
			createGhostOptionTwoThree.description = "specify a reason for the ghosting.";
			createGhostOptionTwoThree.required	  = true;
			createGhostOptionTwoThree.type		  = application_command_option_type::String;
			createGhostOptionTwo.options.emplace_back(createGhostOptionTwoThree);
			createGhostCommandData.options.emplace_back(createGhostOptionTwo);
			application_command_option_data createGhostOptionThree;
			createGhostOptionThree.type		   = application_command_option_type::Sub_Command;
			createGhostOptionThree.name		   = "remove";
			createGhostOptionThree.description = "un-ghosts a server member.";
			application_command_option_data createGhostOptionThreeTwo;
			createGhostOptionThreeTwo.name		  = "user";
			createGhostOptionThreeTwo.description = "chooses which member to un-ghost.";
			createGhostOptionThreeTwo.required	  = true;
			createGhostOptionThreeTwo.type		  = application_command_option_type::User_Data;
			createGhostOptionThree.options.emplace_back(createGhostOptionThreeTwo);
			createGhostCommandData.options.emplace_back(createGhostOptionThree);

			createPurgeCommandData.dmPermission				= false;
			createPurgeCommandData.description				= "purges a bulk of messages, possibly from a particular user.";
			createPurgeCommandData.name						= "purge";
			createPurgeCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createPurgeCommandData.type						= application_command_type::Chat_Input;
			application_command_option_data createPurgeOptionOne;
			createPurgeOptionOne.type		 = application_command_option_type::Integer;
			createPurgeOptionOne.name		 = "amount";
			createPurgeOptionOne.minValue	 = 1;
			createPurgeOptionOne.maxValue	 = 10000;
			createPurgeOptionOne.required	 = true;
			createPurgeOptionOne.description = "the quantity of messages to delete.";
			createPurgeCommandData.options.emplace_back(createPurgeOptionOne);
			application_command_option_data createPurgeOptionTwo;
			createPurgeOptionTwo.type		 = application_command_option_type::User_Data;
			createPurgeOptionTwo.name		 = "user";
			createPurgeOptionTwo.required	 = false;
			createPurgeOptionTwo.description = "an optional user, who's messages will be deleted.";
			createPurgeCommandData.options.emplace_back(createPurgeOptionTwo);
			application_command_option_data createPurgeOptionThree;
			createPurgeOptionThree.type		   = application_command_option_type::String;
			createPurgeOptionThree.name		   = "user_id";
			createPurgeOptionThree.required	   = false;
			createPurgeOptionThree.description = "an optional user, who's messages will be deleted.";
			createPurgeCommandData.options.emplace_back(createPurgeOptionThree);
			application_command_option_data createPurgeOptionFour;
			createPurgeOptionFour.type		  = application_command_option_type::Boolean;
			createPurgeOptionFour.name		  = "deletepinned";
			createPurgeOptionFour.required	  = false;
			createPurgeOptionFour.description = "do we delete pinned messages?";
			createPurgeCommandData.options.emplace_back(createPurgeOptionFour);

			createServerInfoCommandData.dmPermission			 = false;
			createServerInfoCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createServerInfoCommandData.description				 = "displays info about the current server.";
			createServerInfoCommandData.name					 = "serverinfo";
			createServerInfoCommandData.type					 = application_command_type::Chat_Input;

			createSetBorderColorCommandData.dmPermission			 = false;
			createSetBorderColorCommandData.description				 = "set the default color of borders.";
			createSetBorderColorCommandData.name					 = "setbordercolor";
			createSetBorderColorCommandData.type					 = application_command_type::Chat_Input;
			createSetBorderColorCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			application_command_option_data createSetBorderColoreOptionOne;
			createSetBorderColoreOptionOne.type		   = application_command_option_type::String;
			createSetBorderColoreOptionOne.name		   = "botname";
			createSetBorderColoreOptionOne.description = "which of the bots to change the setting on.";
			createSetBorderColoreOptionOne.required	   = true;
			application_command_option_choice_data setBorderColorchoiceOne;
			setBorderColorchoiceOne.name  = "janny";
			setBorderColorchoiceOne.value = "janny";
			createSetBorderColoreOptionOne.choices.emplace_back(setBorderColorchoiceOne);
			createSetBorderColorCommandData.options.emplace_back(createSetBorderColoreOptionOne);
			application_command_option_data createSetBorderColorOptionTwo;
			createSetBorderColorOptionTwo.type		  = application_command_option_type::String;
			createSetBorderColorOptionTwo.name		  = "hexcolorvalue";
			createSetBorderColorOptionTwo.required	  = true;
			createSetBorderColorOptionTwo.description = "the hex-color-value to set the borders to.";
			createSetBorderColorCommandData.options.emplace_back(createSetBorderColorOptionTwo);

			createUserInfoCommandData.dmPermission			   = false;
			createUserInfoCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createUserInfoCommandData.type					   = application_command_type::Chat_Input;
			createUserInfoCommandData.description			   = "displays info about a chosen user.";
			createUserInfoCommandData.name					   = "userinfo";
			application_command_option_data createUserInfoOptionOne;
			createUserInfoOptionOne.type		= application_command_option_type::User_Data;
			createUserInfoOptionOne.name		= "user";
			createUserInfoOptionOne.description = "which of the users to view info about.";
			createUserInfoOptionOne.required	= true;
			createUserInfoCommandData.options.emplace_back(createUserInfoOptionOne);

			createSetInvitesChannelCommandData.dmPermission				= false;
			createSetInvitesChannelCommandData.description				= "set the invite tracking channel and enables, or disables it.";
			createSetInvitesChannelCommandData.name						= "setinviteschannel";
			createSetInvitesChannelCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createSetInvitesChannelCommandData.type						= application_command_type::Chat_Input;
			application_command_option_data createSetInvitesChannelOptionOne;
			createSetInvitesChannelOptionOne.type		 = application_command_option_type::Sub_Command;
			createSetInvitesChannelOptionOne.name		 = "add";
			createSetInvitesChannelOptionOne.description = "add the current channel as the invites-tracking channel, and activate it.";
			application_command_option_data createSetInvitesChannelOptionOneOne;
			createSetInvitesChannelOptionOneOne.type		= application_command_option_type::String;
			createSetInvitesChannelOptionOneOne.name		= "add";
			createSetInvitesChannelOptionOneOne.description = "enable the invite-tracking.";
			createSetInvitesChannelOptionOneOne.required	= true;
			application_command_option_choice_data createSetInvitesChoiceOne;
			createSetInvitesChoiceOne.name	= "add";
			createSetInvitesChoiceOne.value = "add";
			createSetInvitesChannelOptionOneOne.choices.emplace_back(createSetInvitesChoiceOne);
			createSetInvitesChannelOptionOne.options.emplace_back(createSetInvitesChannelOptionOneOne);
			createSetInvitesChannelCommandData.options.emplace_back(createSetInvitesChannelOptionOne);
			application_command_option_data createSetInvitesChannelOptionTwo;
			createSetInvitesChannelOptionTwo.type		 = application_command_option_type::Sub_Command;
			createSetInvitesChannelOptionTwo.name		 = "remove";
			createSetInvitesChannelOptionTwo.description = "remove the current channel as the invites-tracking channel, and deactivate it.";
			application_command_option_data createSetInvitesChannelOptionTwoOne;
			createSetInvitesChannelOptionTwoOne.type		= application_command_option_type::String;
			createSetInvitesChannelOptionTwoOne.name		= "remove";
			createSetInvitesChannelOptionTwoOne.description = "cancel the invite tracking.";
			createSetInvitesChannelOptionTwoOne.required	= true;
			application_command_option_choice_data createSetInvitesChoiceTwo;
			createSetInvitesChoiceTwo.name	= "remove";
			createSetInvitesChoiceTwo.value = "remove";
			createSetInvitesChannelOptionTwoOne.choices.emplace_back(createSetInvitesChoiceTwo);
			createSetInvitesChannelOptionTwo.options.emplace_back(createSetInvitesChannelOptionTwoOne);
			createSetInvitesChannelCommandData.options.emplace_back(createSetInvitesChannelOptionTwo);
			application_command_option_data createSetInvitesChannelOptionThree;
			createSetInvitesChannelOptionThree.type		   = application_command_option_type::Sub_Command;
			createSetInvitesChannelOptionThree.name		   = "view";
			createSetInvitesChannelOptionThree.description = "displays the current list of members and their respective invite-counts.";
			application_command_option_data createSetInvitesChannelOptionThreeOne;
			createSetInvitesChannelOptionThreeOne.type		  = application_command_option_type::String;
			createSetInvitesChannelOptionThreeOne.name		  = "view";
			createSetInvitesChannelOptionThreeOne.description = "displays the current invite-counts.";
			createSetInvitesChannelOptionThreeOne.required	  = true;
			application_command_option_choice_data createSetInvitesChoiceThree;
			createSetInvitesChoiceThree.name  = "view";
			createSetInvitesChoiceThree.value = "view";
			createSetInvitesChannelOptionThreeOne.choices.emplace_back(createSetInvitesChoiceThree);
			createSetInvitesChannelOptionThree.options.emplace_back(createSetInvitesChannelOptionThreeOne);
			createSetInvitesChannelCommandData.options.emplace_back(createSetInvitesChannelOptionThree);

			createBanCommandData.dmPermission			  = false;
			createBanCommandData.description			  = "ban a user or look at the banner's leaderboard.";
			createBanCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createBanCommandData.name					  = "ban";
			createBanCommandData.type					  = application_command_type::Chat_Input;
			application_command_option_data createBanOptionThree;
			createBanOptionThree.type		 = application_command_option_type::Sub_Command;
			createBanOptionThree.name		 = "view";
			createBanOptionThree.description = "displays the current leaderboard of banners.";
			createBanCommandData.options.emplace_back(createBanOptionThree);
			application_command_option_data createBanOptionOne;
			createBanOptionOne.type		   = application_command_option_type::Sub_Command;
			createBanOptionOne.name		   = "add";
			createBanOptionOne.description = "adds a user to the banned list.";
			application_command_option_data createBanOptionOneOne;
			createBanOptionOneOne.type		  = application_command_option_type::User_Data;
			createBanOptionOneOne.name		  = "user";
			createBanOptionOneOne.description = "the user to ban.";
			createBanOptionOneOne.required	  = true;
			createBanOptionOne.options.emplace_back(createBanOptionOneOne);
			application_command_option_data createBanOptionOneTwo;
			createBanOptionOneTwo.type		  = application_command_option_type::String;
			createBanOptionOneTwo.name		  = "reason";
			createBanOptionOneTwo.description = "the reason for the ban.";
			createBanOptionOneTwo.required	  = true;
			createBanOptionOne.options.emplace_back(createBanOptionOneTwo);
			application_command_option_data createBanOptionOneThree;
			createBanOptionOneThree.type		= application_command_option_type::Integer;
			createBanOptionOneThree.minValue	= 1;
			createBanOptionOneThree.maxValue	= 7;
			createBanOptionOneThree.name		= "numberofdaystopurge";
			createBanOptionOneThree.description = "the number of days of the user's messages to purge.";
			createBanOptionOneThree.required	= false;
			createBanOptionOne.options.emplace_back(createBanOptionOneThree);
			createBanCommandData.options.emplace_back(createBanOptionOne);

			createSetDeletionStatusCommandData.dmPermission				= false;
			createSetDeletionStatusCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createSetDeletionStatusCommandData.description				= "enables or disables message-purging in a given channel.";
			createSetDeletionStatusCommandData.name						= "setdeletionstatus";
			createSetDeletionStatusCommandData.type						= application_command_type::Chat_Input;
			application_command_option_data createSetDeletionStatusOptionOne;
			createSetDeletionStatusOptionOne.type		 = application_command_option_type::Sub_Command;
			createSetDeletionStatusOptionOne.name		 = "add";
			createSetDeletionStatusOptionOne.description = "add the current channel as a message-purging channel.";
			application_command_option_data createSetDeletionStatusOptionOneTwo;
			createSetDeletionStatusOptionOneTwo.type		= application_command_option_type::Integer;
			createSetDeletionStatusOptionOneTwo.name		= "quantity";
			createSetDeletionStatusOptionOneTwo.minValue	= 1;
			createSetDeletionStatusOptionOneTwo.maxValue	= 100000;
			createSetDeletionStatusOptionOneTwo.description = "the number of messages to save in the channel.";
			createSetDeletionStatusOptionOneTwo.required	= true;
			createSetDeletionStatusOptionOne.options.emplace_back(createSetDeletionStatusOptionOneTwo);

			application_command_option_data createSetDeletionStatusOptionOneThree;
			createSetDeletionStatusOptionOneThree.type		  = application_command_option_type::Integer;
			createSetDeletionStatusOptionOneThree.minValue	  = 1;
			createSetDeletionStatusOptionOneThree.maxValue	  = 100000;
			createSetDeletionStatusOptionOneThree.name		  = "minutestosave";
			createSetDeletionStatusOptionOneThree.description = "the number of minutes to save the messages before deleting them.";
			createSetDeletionStatusOptionOneThree.required	  = true;
			createSetDeletionStatusOptionOne.options.emplace_back(createSetDeletionStatusOptionOneThree);
			createSetDeletionStatusCommandData.options.emplace_back(createSetDeletionStatusOptionOne);

			application_command_option_data createSetDeletionStatusOptionTwo;
			createSetDeletionStatusOptionTwo.type		 = application_command_option_type::Sub_Command;
			createSetDeletionStatusOptionTwo.name		 = "remove";
			createSetDeletionStatusOptionTwo.description = "remove the current channel as a message-purging channel.";

			createSetDeletionStatusCommandData.options.emplace_back(createSetDeletionStatusOptionTwo);
			application_command_option_data createSetDeletionStatusOptionThree;
			createSetDeletionStatusOptionThree.type		   = application_command_option_type::Sub_Command;
			createSetDeletionStatusOptionThree.name		   = "view";
			createSetDeletionStatusOptionThree.description = "displays the current list of message-purging channels.";

			createSetDeletionStatusCommandData.options.emplace_back(createSetDeletionStatusOptionThree);

			createUserInfoData.dmPermission				= false;
			createUserInfoData.type						= application_command_type::User_Data;
			createUserInfoData.name						= "user_data info";
			createUserInfoData.defaultMemberPermissions = permission::Use_Application_Commands;

			createApplicationCommandsCommandData.dmPermission			  = false;
			createApplicationCommandsCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createApplicationCommandsCommandData.type					  = application_command_type::Chat_Input;
			createApplicationCommandsCommandData.description			  = "register the programmatically designated slash commands.";
			createApplicationCommandsCommandData.name					  = "registerapplicationcommands";

			createTestData.dmPermission				= true;
			createTestData.type						= application_command_type::Chat_Input;
			createTestData.name						= "test";
			createTestData.defaultMemberPermissions = permission::Use_Application_Commands;
			createTestData.description				= "test command.";
			application_command_option_data createTestCommandOptionOne{};
			createTestCommandOptionOne.type		   = application_command_option_type::String;
			createTestCommandOptionOne.name		   = "test";
			createTestCommandOptionOne.required	   = true;
			createTestCommandOptionOne.description = "the test to be entered.";
			createTestData.options.emplace_back(createTestCommandOptionOne);

			createManageLogsData.dmPermission			  = false;
			createManageLogsData.type					  = application_command_type::Chat_Input;
			createManageLogsData.name					  = "managelogs";
			createManageLogsData.description			  = "check the status and/or set the status of various logs.";
			createManageLogsData.defaultMemberPermissions = permission::Use_Application_Commands;
			application_command_option_data createManageLogsOptionOh;
			createManageLogsOptionOh.type		 = application_command_option_type::Sub_Command;
			createManageLogsOptionOh.description = "view the currently enabled/disabled logs.";
			createManageLogsOptionOh.name		 = "view";
			createManageLogsData.options.emplace_back(createManageLogsOptionOh);
			application_command_option_data createManageLogsOptionOne;
			createManageLogsOptionOne.type		  = application_command_option_type::Sub_Command;
			createManageLogsOptionOne.description = "group 1 of the potential logs to set.";
			createManageLogsOptionOne.name		  = "group1";
			application_command_option_data createManageLogsOptionOhOne;
			createManageLogsOptionOhOne.name		= "settowhat";
			createManageLogsOptionOhOne.description = "enable or disable the currently selected log?";
			createManageLogsOptionOhOne.required	= true;
			createManageLogsOptionOhOne.type		= application_command_option_type::Boolean;
			createManageLogsOptionOne.options.emplace_back(createManageLogsOptionOhOne);
			application_command_option_data createManageLogsOptionOneOne;
			createManageLogsOptionOneOne.name		 = "group1option";
			createManageLogsOptionOneOne.description = "select which log you would like to set.";
			createManageLogsOptionOneOne.required	 = true;
			createManageLogsOptionOneOne.type		 = application_command_option_type::String;

			discord_guild theGuild{};
			for (int32_t x = 0; x < 10; x += 1) {
				application_command_option_choice_data choiceDataOne;
				choiceDataOne.name	= theGuild.data.logs[x].name;
				choiceDataOne.value = jsonifier::string{ theGuild.data.logs[x].nameSmall };
				createManageLogsOptionOneOne.choices.emplace_back(choiceDataOne);
			}
			createManageLogsOptionOne.options.emplace_back(createManageLogsOptionOneOne);
			createManageLogsData.options.emplace_back(createManageLogsOptionOne);
			application_command_option_data createManageLogsOptionTwo;
			createManageLogsOptionTwo.type		  = application_command_option_type::Sub_Command;
			createManageLogsOptionTwo.description = "group 2 of the potential logs to set.";
			createManageLogsOptionTwo.name		  = "group2";
			application_command_option_data createManageLogsOptionOhTwo;
			createManageLogsOptionOhTwo.name		= "settowhat";
			createManageLogsOptionOhTwo.description = "enable or disable the currently selected log?";
			createManageLogsOptionOhTwo.required	= true;
			createManageLogsOptionOhTwo.type		= application_command_option_type::Boolean;
			createManageLogsOptionTwo.options.emplace_back(createManageLogsOptionOhTwo);
			application_command_option_data createManageLogsOptionTwoOne;
			createManageLogsOptionTwoOne.name		 = "group2option";
			createManageLogsOptionTwoOne.description = "select which log you would like to set.";
			createManageLogsOptionTwoOne.required	 = true;
			createManageLogsOptionTwoOne.type		 = application_command_option_type::String;
			for (int32_t x = 10; x < theGuild.data.logs.size(); x += 1) {
				application_command_option_choice_data choiceDataOne;
				choiceDataOne.name	= theGuild.data.logs[x].name;
				choiceDataOne.value = jsonifier::string{ theGuild.data.logs[x].nameSmall };
				createManageLogsOptionTwoOne.choices.emplace_back(choiceDataOne);
			}
			createManageLogsOptionTwo.options.emplace_back(createManageLogsOptionTwoOne);
			createManageLogsData.options.emplace_back(createManageLogsOptionTwo);

			createHelpData.dmPermission				= true;
			createHelpData.defaultMemberPermissions = permission::Use_Application_Commands;
			createHelpData.type						= application_command_type::Chat_Input;
			createHelpData.name						= "help";
			createHelpData.description				= "a help command for this bot.";

			createAvatarData.dmPermission			  = false;
			createAvatarData.defaultMemberPermissions = permission::Use_Application_Commands;
			createAvatarData.type					  = application_command_type::Chat_Input;
			createAvatarData.description			  = "displays the getUserImageUrl(user_image_types::Avatar) of a chosen user.";
			createAvatarData.name					  = "avatar";
			createAvatarData.defaultMemberPermissions = permission::Use_Application_Commands;
			application_command_option_data createAvatarOptionOne{};
			createAvatarOptionOne.type		  = application_command_option_type::User_Data;
			createAvatarOptionOne.name		  = "user";
			createAvatarOptionOne.description = "which of the users to view the getUserImageUrl(user_image_types::Avatar) of.";
			createAvatarOptionOne.required	  = true;
			createAvatarData.options.emplace_back(createAvatarOptionOne);

			createPushmeCommandData.dmPermission			 = false;
			createPushmeCommandData.defaultMemberPermissions = permission::Use_Application_Commands;
			createPushmeCommandData.name					 = "pushme";
			createPushmeCommandData.type					 = application_command_type::Chat_Input;
			createPushmeCommandData.description				 = "push me to find out!";
		}
		create_global_application_command_data reactionRoleData{};
		create_global_application_command_data createStreamAudioData{};
		create_global_application_command_data createDisconnectData{};
		create_global_application_command_data createSetDefaultRoleIdsData{};
		create_global_application_command_data createBotInfoCommandData{};
		create_global_application_command_data createDisplayGuildsDataCommandData{};
		create_global_application_command_data createGhostCommandData{};
		create_global_application_command_data createPurgeCommandData{};
		create_global_application_command_data createServerInfoCommandData{};
		create_global_application_command_data createSetBorderColorCommandData{};
		create_global_application_command_data createUserInfoCommandData{};
		create_global_application_command_data createSetInvitesChannelCommandData{};
		create_global_application_command_data createBanCommandData{};
		create_global_application_command_data createSetDeletionStatusCommandData{};
		create_global_application_command_data createUserInfoData{};
		create_global_application_command_data createApplicationCommandsCommandData{};
		create_global_application_command_data createTestData{};
		create_global_application_command_data createManageLogsData{};
		create_global_application_command_data createHelpData{};
		create_global_application_command_data createAvatarData{};
		create_global_application_command_data createPushmeCommandData{};
	};


}// namespace discord_core_api
